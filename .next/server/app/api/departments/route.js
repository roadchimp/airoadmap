"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/departments/route";
exports.ids = ["app/api/departments/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = import("pg");;

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdepartments%2Froute&page=%2Fapi%2Fdepartments%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdepartments%2Froute.ts&appDir=%2FUsers%2Fsamsena%2FDocuments%2FRepos%2Fairoadmap%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsamsena%2FDocuments%2FRepos%2Fairoadmap&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdepartments%2Froute&page=%2Fapi%2Fdepartments%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdepartments%2Froute.ts&appDir=%2FUsers%2Fsamsena%2FDocuments%2FRepos%2Fairoadmap%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsamsena%2FDocuments%2FRepos%2Fairoadmap&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_samsena_Documents_Repos_airoadmap_app_api_departments_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/departments/route.ts */ \"(rsc)/./app/api/departments/route.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_Users_samsena_Documents_Repos_airoadmap_app_api_departments_route_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_Users_samsena_Documents_Repos_airoadmap_app_api_departments_route_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/departments/route\",\n        pathname: \"/api/departments\",\n        filename: \"route\",\n        bundlePath: \"app/api/departments/route\"\n    },\n    resolvedPagePath: \"/Users/samsena/Documents/Repos/airoadmap/app/api/departments/route.ts\",\n    nextConfigOutput,\n    userland: _Users_samsena_Documents_Repos_airoadmap_app_api_departments_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/departments/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZkZXBhcnRtZW50cyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGZGVwYXJ0bWVudHMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZkZXBhcnRtZW50cyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnNhbXNlbmElMkZEb2N1bWVudHMlMkZSZXBvcyUyRmFpcm9hZG1hcCUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZzYW1zZW5hJTJGRG9jdW1lbnRzJTJGUmVwb3MlMkZhaXJvYWRtYXAmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3FCO0FBQ2xHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZILHFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVzdC1leHByZXNzLz8wMzlkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9zYW1zZW5hL0RvY3VtZW50cy9SZXBvcy9haXJvYWRtYXAvYXBwL2FwaS9kZXBhcnRtZW50cy9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZGVwYXJ0bWVudHMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9kZXBhcnRtZW50c1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvZGVwYXJ0bWVudHMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvc2Ftc2VuYS9Eb2N1bWVudHMvUmVwb3MvYWlyb2FkbWFwL2FwcC9hcGkvZGVwYXJ0bWVudHMvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2RlcGFydG1lbnRzL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdepartments%2Froute&page=%2Fapi%2Fdepartments%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdepartments%2Froute.ts&appDir=%2FUsers%2Fsamsena%2FDocuments%2FRepos%2Fairoadmap%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsamsena%2FDocuments%2FRepos%2Fairoadmap&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/departments/route.ts":
/*!**************************************!*\
  !*** ./app/api/departments/route.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _server_storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/server/storage */ \"(rsc)/./server/storage.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_server_storage__WEBPACK_IMPORTED_MODULE_1__]);\n_server_storage__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n // Assuming @/server alias points to server/\nasync function GET() {\n    try {\n        const departments = await _server_storage__WEBPACK_IMPORTED_MODULE_1__.storage.listDepartments();\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(departments);\n    } catch (error) {\n        console.error(\"Error fetching departments:\", error);\n        // Determine the type of error and respond accordingly\n        let errorMessage = \"Internal Server Error\";\n        let statusCode = 500;\n        // Example: Check if it's a specific storage error if applicable\n        // if (error instanceof SpecificStorageError) { \n        //   errorMessage = error.message;\n        //   statusCode = error.statusCode || 500; \n        // } else if (error instanceof Error) {\n        //   errorMessage = error.message; // Generic error message\n        // }\n        // For now, using a generic error response\n        if (error instanceof Error) {\n            errorMessage = error.message;\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: errorMessage\n        }, {\n            status: statusCode\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2RlcGFydG1lbnRzL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUEyQztBQUNBLENBQUMsNENBQTRDO0FBRWpGLGVBQWVFO0lBQ3BCLElBQUk7UUFDRixNQUFNQyxjQUFjLE1BQU1GLG9EQUFPQSxDQUFDRyxlQUFlO1FBQ2pELE9BQU9KLHFEQUFZQSxDQUFDSyxJQUFJLENBQUNGO0lBQzNCLEVBQUUsT0FBT0csT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsK0JBQStCQTtRQUM3QyxzREFBc0Q7UUFDdEQsSUFBSUUsZUFBZTtRQUNuQixJQUFJQyxhQUFhO1FBRWpCLGdFQUFnRTtRQUNoRSxnREFBZ0Q7UUFDaEQsa0NBQWtDO1FBQ2xDLDJDQUEyQztRQUMzQyx1Q0FBdUM7UUFDdkMsMkRBQTJEO1FBQzNELElBQUk7UUFFSiwwQ0FBMEM7UUFDMUMsSUFBSUgsaUJBQWlCSSxPQUFPO1lBQzFCRixlQUFlRixNQUFNSyxPQUFPO1FBQzlCO1FBRUEsT0FBT1gscURBQVlBLENBQUNLLElBQUksQ0FBQztZQUFFTSxTQUFTSDtRQUFhLEdBQUc7WUFBRUksUUFBUUg7UUFBVztJQUMzRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVzdC1leHByZXNzLy4vYXBwL2FwaS9kZXBhcnRtZW50cy9yb3V0ZS50cz9mZDk1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IHN0b3JhZ2UgfSBmcm9tICdAL3NlcnZlci9zdG9yYWdlJzsgLy8gQXNzdW1pbmcgQC9zZXJ2ZXIgYWxpYXMgcG9pbnRzIHRvIHNlcnZlci9cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVCgpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBkZXBhcnRtZW50cyA9IGF3YWl0IHN0b3JhZ2UubGlzdERlcGFydG1lbnRzKCk7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKGRlcGFydG1lbnRzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBkZXBhcnRtZW50czonLCBlcnJvcik7XG4gICAgLy8gRGV0ZXJtaW5lIHRoZSB0eXBlIG9mIGVycm9yIGFuZCByZXNwb25kIGFjY29yZGluZ2x5XG4gICAgbGV0IGVycm9yTWVzc2FnZSA9ICdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3InO1xuICAgIGxldCBzdGF0dXNDb2RlID0gNTAwO1xuXG4gICAgLy8gRXhhbXBsZTogQ2hlY2sgaWYgaXQncyBhIHNwZWNpZmljIHN0b3JhZ2UgZXJyb3IgaWYgYXBwbGljYWJsZVxuICAgIC8vIGlmIChlcnJvciBpbnN0YW5jZW9mIFNwZWNpZmljU3RvcmFnZUVycm9yKSB7IFxuICAgIC8vICAgZXJyb3JNZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcbiAgICAvLyAgIHN0YXR1c0NvZGUgPSBlcnJvci5zdGF0dXNDb2RlIHx8IDUwMDsgXG4gICAgLy8gfSBlbHNlIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgLy8gICBlcnJvck1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlOyAvLyBHZW5lcmljIGVycm9yIG1lc3NhZ2VcbiAgICAvLyB9XG5cbiAgICAvLyBGb3Igbm93LCB1c2luZyBhIGdlbmVyaWMgZXJyb3IgcmVzcG9uc2VcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgZXJyb3JNZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcbiAgICB9XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBtZXNzYWdlOiBlcnJvck1lc3NhZ2UgfSwgeyBzdGF0dXM6IHN0YXR1c0NvZGUgfSk7XG4gIH1cbn0gIl0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsInN0b3JhZ2UiLCJHRVQiLCJkZXBhcnRtZW50cyIsImxpc3REZXBhcnRtZW50cyIsImpzb24iLCJlcnJvciIsImNvbnNvbGUiLCJlcnJvck1lc3NhZ2UiLCJzdGF0dXNDb2RlIiwiRXJyb3IiLCJtZXNzYWdlIiwic3RhdHVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/departments/route.ts\n");

/***/ }),

/***/ "(rsc)/./server/pg-storage.ts":
/*!******************************!*\
  !*** ./server/pg-storage.ts ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PgStorage: () => (/* binding */ PgStorage)\n/* harmony export */ });\n/* harmony import */ var drizzle_orm_node_postgres__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! drizzle-orm/node-postgres */ \"(rsc)/./node_modules/drizzle-orm/node-postgres/driver.js\");\n/* harmony import */ var drizzle_orm_neon_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! drizzle-orm/neon-http */ \"(rsc)/./node_modules/drizzle-orm/neon-http/driver.js\");\n/* harmony import */ var _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @neondatabase/serverless */ \"(rsc)/./node_modules/@neondatabase/serverless/index.mjs\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! drizzle-orm */ \"(rsc)/./node_modules/drizzle-orm/sql/expressions/conditions.js\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! drizzle-orm */ \"(rsc)/./node_modules/drizzle-orm/sql/expressions/select.js\");\n/* harmony import */ var drizzle_orm__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! drizzle-orm */ \"(rsc)/./node_modules/drizzle-orm/sql/sql.js\");\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dotenv */ \"(rsc)/./node_modules/dotenv/lib/main.js\");\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dotenv__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/schema.ts */ \"(rsc)/./shared/schema.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([drizzle_orm_node_postgres__WEBPACK_IMPORTED_MODULE_4__]);\ndrizzle_orm_node_postgres__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n// Import the schema\n\n// Load root .env file for local development\nif (true) {\n    // Ensure dotenv is only loaded if not on Vercel\n    if (!process.env.VERCEL_ENV) {\n        dotenv__WEBPACK_IMPORTED_MODULE_1___default().config({\n            path: \".env\"\n        });\n    }\n}\nclass PgStorage {\n    constructor(){\n        this.isInitialized = false;\n        this.initPromise = this.initializeAsync();\n    }\n    async initializeAsync() {\n        try {\n            let connectionString;\n            // Use Neon connection string on Vercel\n            if (process.env.VERCEL_ENV === \"production\" || process.env.VERCEL_ENV === \"preview\") {\n                console.log(\"Initializing Neon HTTP database connection for Vercel\");\n                connectionString = process.env.DATABASE_POSTGRES_URL;\n                if (!connectionString) {\n                    throw new Error(\"DATABASE_POSTGRES_URL environment variable not set for Vercel environment\");\n                }\n                const sql = (0,_neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__.neon)(connectionString);\n                this.db = (0,drizzle_orm_neon_http__WEBPACK_IMPORTED_MODULE_3__.drizzle)(sql);\n                this.isInitialized = true;\n                console.log(\"Neon HTTP database connection established\");\n            } else {\n                // Use local DATABASE_URL for local development\n                console.log(\"Initializing standard PostgreSQL connection for local development\");\n                connectionString = process.env.DATABASE_URL;\n                if (!connectionString) {\n                    throw new Error(\"DATABASE_URL environment variable not set for local development (check .env file)\");\n                }\n                const pg = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! pg */ \"pg\"));\n                this.pool = new pg.Pool({\n                    connectionString\n                });\n                this.db = (0,drizzle_orm_node_postgres__WEBPACK_IMPORTED_MODULE_4__.drizzle)(this.pool);\n                this.isInitialized = true;\n                console.log(\"Standard PostgreSQL database connection established\");\n            }\n        } catch (error) {\n            console.error(\"Error initializing database connection:\", error);\n            throw error;\n        }\n    }\n    // Helper method to ensure DB is initialized before any operation\n    async ensureInitialized() {\n        if (!this.isInitialized) {\n            await this.initPromise;\n        }\n    }\n    async disconnect() {\n        // Only need to disconnect the pool for local pg connections\n        if (this.pool) {\n            await this.pool.end();\n            console.log(\"Standard PostgreSQL database connection closed\");\n        }\n        this.isInitialized = false;\n    }\n    // User methods\n    async getUser(id) {\n        const result = await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.users).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.users.id, id));\n        return result[0];\n    }\n    async getUserByUsername(username) {\n        const result = await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.users).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.users.username, username));\n        return result[0];\n    }\n    async createUser(user) {\n        const result = await this.db.insert(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.users).values(user).returning();\n        return result[0];\n    }\n    // Organization methods\n    async getOrganization(id) {\n        const result = await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.organizations).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.organizations.id, id));\n        return result[0];\n    }\n    async listOrganizations() {\n        return await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.organizations);\n    }\n    async createOrganization(org) {\n        const result = await this.db.insert(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.organizations).values(org).returning();\n        return result[0];\n    }\n    // Department methods\n    async getDepartment(id) {\n        const result = await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.departments).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.departments.id, id));\n        return result[0];\n    }\n    async listDepartments() {\n        return await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.departments);\n    }\n    async createDepartment(dept) {\n        const result = await this.db.insert(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.departments).values(dept).returning();\n        return result[0];\n    }\n    // JobRole methods\n    async getJobRole(id) {\n        const result = await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobRoles).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobRoles.id, id));\n        return result[0];\n    }\n    async listJobRoles() {\n        // Join jobRoles with departments and select department name\n        return await this.db.select({\n            ..._shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobRoles,\n            departmentName: _shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.departments.name // Select department name as departmentName\n        }).from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobRoles).leftJoin(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.departments, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobRoles.departmentId, _shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.departments.id)).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_6__.asc)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobRoles.title)); // Optional: order by title\n    }\n    async listJobRolesByDepartment(departmentId) {\n        // Join jobRoles with departments and select department name, filtered by departmentId\n        return await this.db.select({\n            ..._shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobRoles,\n            departmentName: _shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.departments.name // Select department name as departmentName\n        }).from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobRoles).leftJoin(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.departments, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobRoles.departmentId, _shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.departments.id)).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobRoles.departmentId, departmentId)).orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_6__.asc)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobRoles.title)); // Optional: order by title\n    }\n    async createJobRole(role) {\n        const result = await this.db.insert(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobRoles).values(role).returning();\n        return result[0];\n    }\n    // AICapability methods\n    async getAICapability(id) {\n        const result = await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.aiCapabilities).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.aiCapabilities.id, id));\n        return result[0];\n    }\n    async listAICapabilities() {\n        return await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.aiCapabilities);\n    }\n    async createAICapability(capability) {\n        const result = await this.db.insert(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.aiCapabilities).values(capability).returning();\n        return result[0];\n    }\n    // Assessment methods\n    async getAssessment(id) {\n        const result = await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.assessments).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.assessments.id, id));\n        return result[0];\n    }\n    async listAssessments() {\n        return await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.assessments);\n    }\n    async listAssessmentsByUser(userId) {\n        return await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.assessments).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.assessments.userId, userId));\n    }\n    async createAssessment(assessment) {\n        const result = await this.db.insert(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.assessments).values({\n            ...assessment,\n            status: assessment.status || \"draft\",\n            stepData: assessment.stepData || null\n        }).returning();\n        return result[0];\n    }\n    async updateAssessmentStep(id, stepData) {\n        // Get current assessment\n        const current = await this.getAssessment(id);\n        if (!current) {\n            throw new Error(`Assessment with ID ${id} not found`);\n        }\n        // Merge stepData with existing data safely\n        let updatedStepData = {};\n        // Only spread if there's existing data and it's an object\n        if (current.stepData && typeof current.stepData === \"object\") {\n            updatedStepData = {\n                ...current.stepData\n            };\n        }\n        // Add the new step data\n        updatedStepData = {\n            ...updatedStepData,\n            ...stepData\n        };\n        // Update assessment\n        const result = await this.db.update(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.assessments).set({\n            stepData: updatedStepData\n        }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.assessments.id, id)).returning();\n        return result[0];\n    }\n    async updateAssessmentStatus(id, status) {\n        const result = await this.db.update(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.assessments).set({\n            status\n        }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.assessments.id, id)).returning();\n        return result[0];\n    }\n    // Report methods\n    async getReport(id) {\n        const result = await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.reports).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.reports.id, id));\n        return result[0];\n    }\n    async getReportByAssessment(assessmentId) {\n        const result = await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.reports).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.reports.assessmentId, assessmentId));\n        return result[0];\n    }\n    async listReports() {\n        return await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.reports);\n    }\n    async createReport(report) {\n        const result = await this.db.insert(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.reports).values(report).returning();\n        return result[0];\n    }\n    async updateReportCommentary(id, commentary) {\n        const result = await this.db.update(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.reports).set({\n            commentary\n        }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.reports.id, id)).returning();\n        return result[0];\n    }\n    // Job Description methods\n    async getJobDescription(id) {\n        await this.ensureInitialized();\n        const result = await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobDescriptions).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobDescriptions.id, id));\n        return result[0];\n    }\n    async listJobDescriptions(limit = 100, offset = 0) {\n        await this.ensureInitialized();\n        return await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobDescriptions).limit(limit).offset(offset);\n    }\n    async listJobDescriptionsByStatus(status, limit = 100, offset = 0) {\n        await this.ensureInitialized();\n        return await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobDescriptions).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobDescriptions.status, status)).limit(limit).offset(offset);\n    }\n    async createJobDescription(jobDescription) {\n        await this.ensureInitialized();\n        console.log(\"PgStorage: Creating job description:\", jobDescription.title);\n        try {\n            const now = new Date();\n            // Ensure keywords is properly formatted as an array of strings\n            const keywords = jobDescription.keywords ? Array.isArray(jobDescription.keywords) ? jobDescription.keywords : [\n                String(jobDescription.keywords)\n            ] : null;\n            // Create a sanitized object to insert\n            const sanitizedJobDescription = {\n                ...jobDescription,\n                status: jobDescription.status || \"raw\",\n                company: jobDescription.company || null,\n                location: jobDescription.location || null,\n                processedContent: null,\n                keywords: keywords,\n                dateScraped: now,\n                dateProcessed: null,\n                error: null\n            };\n            // Log the data we're trying to insert for debugging\n            console.log(\"PgStorage: Inserting with data:\", JSON.stringify({\n                title: sanitizedJobDescription.title,\n                company: sanitizedJobDescription.company,\n                jobBoard: sanitizedJobDescription.jobBoard,\n                keywords: sanitizedJobDescription.keywords\n            }));\n            const result = await this.db.insert(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobDescriptions).values(sanitizedJobDescription).returning();\n            console.log(\"PgStorage: Successfully created job description with ID:\", result[0].id);\n            return result[0];\n        } catch (error) {\n            console.error(\"PgStorage: Error creating job description:\", error);\n            // Add more detailed error reporting\n            if (error instanceof Error) {\n                console.error(\"Error details:\", error.message);\n                if (\"stack\" in error) {\n                    console.error(\"Stack trace:\", error.stack);\n                }\n            }\n            throw error;\n        }\n    }\n    async updateJobDescriptionProcessedContent(id, processedContent) {\n        await this.ensureInitialized();\n        const now = new Date();\n        const result = await this.db.update(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobDescriptions).set({\n            processedContent,\n            status: \"processed\",\n            dateProcessed: now\n        }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobDescriptions.id, id)).returning();\n        return result[0];\n    }\n    async updateJobDescriptionStatus(id, status, error) {\n        await this.ensureInitialized();\n        const result = await this.db.update(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobDescriptions).set({\n            status,\n            error: error || null\n        }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobDescriptions.id, id)).returning();\n        return result[0];\n    }\n    // Job Scraper Config methods\n    async getJobScraperConfig(id) {\n        await this.ensureInitialized();\n        const result = await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobScraperConfigs).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobScraperConfigs.id, id));\n        return result[0];\n    }\n    async listJobScraperConfigs() {\n        await this.ensureInitialized();\n        return await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobScraperConfigs);\n    }\n    async listActiveJobScraperConfigs() {\n        await this.ensureInitialized();\n        return await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobScraperConfigs).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobScraperConfigs.isActive, true));\n    }\n    async createJobScraperConfig(config) {\n        await this.ensureInitialized();\n        const now = new Date();\n        const result = await this.db.insert(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobScraperConfigs).values({\n            ...config,\n            location: config.location || null,\n            keywords: config.keywords || null,\n            isActive: config.isActive ?? true,\n            cronSchedule: config.cronSchedule || \"0 0 * * *\",\n            createdAt: now,\n            lastRun: null\n        }).returning();\n        return result[0];\n    }\n    async updateJobScraperConfigLastRun(id) {\n        await this.ensureInitialized();\n        const now = new Date();\n        const result = await this.db.update(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobScraperConfigs).set({\n            lastRun: now\n        }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobScraperConfigs.id, id)).returning();\n        return result[0];\n    }\n    async updateJobScraperConfigStatus(id, isActive) {\n        await this.ensureInitialized();\n        const result = await this.db.update(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobScraperConfigs).set({\n            isActive\n        }).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.jobScraperConfigs.id, id)).returning();\n        return result[0];\n    }\n    // AITool methods (Reverted to use snake_case AiTool type)\n    /**\n   * Retrieves a single AI tool by its ID.\n   * @param id The numeric ID of the AI tool.\n   * @returns A promise that resolves to the AiTool object or undefined if not found.\n   */ async getAITool(id) {\n        await this.ensureInitialized();\n        const result = await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.aiTools).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.aiTools.tool_id, id));\n        return result[0];\n    }\n    /**\n   * Lists AI tools, optionally filtering by search term, category, and license type.\n   * @param search Optional search term to filter by tool name or description.\n   * @param category Optional category to filter by.\n   * @param licenseType Optional license type to filter by.\n   * @returns A promise that resolves to an array of AiTool objects.\n   */ async listAITools(search, category, licenseType) {\n        await this.ensureInitialized();\n        let query = this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.aiTools).$dynamic();\n        const conditions = [];\n        if (search) {\n            conditions.push((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_7__.sql)`(${_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.aiTools.tool_name} ilike ${`%${search}%`} or ${_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.aiTools.description} ilike ${`%${search}%`})`);\n        }\n        if (category) {\n            conditions.push((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.aiTools.primary_category, category));\n        }\n        if (licenseType) {\n            conditions.push((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.aiTools.license_type, licenseType));\n        }\n        if (conditions.length > 0) {\n            query = query.where(drizzle_orm__WEBPACK_IMPORTED_MODULE_7__.sql.join(conditions, (0,drizzle_orm__WEBPACK_IMPORTED_MODULE_7__.sql)` and `));\n        }\n        return await query.orderBy((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_6__.asc)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.aiTools.tool_name));\n    }\n    /**\n   * Creates a new AI tool in the database.\n   * @param tool An object conforming to InsertAiTool (snake_case, excluding db-generated fields like created_at, updated_at).\n   * @returns A promise that resolves to the newly created AiTool object (including db-generated fields).\n   */ async createAITool(tool) {\n        await this.ensureInitialized();\n        const dbInsertData = {\n            ...tool,\n            tool_name: tool.tool_name\n        };\n        const result = await this.db.insert(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.aiTools).values(dbInsertData).returning();\n        const newDbTool = result[0];\n        if (!newDbTool) {\n            throw new Error(\"Failed to create AI tool, database did not return the created record.\");\n        }\n        return newDbTool;\n    }\n    /**\n   * Updates an existing AI tool by its ID.\n   * @param id The numeric ID of the AI tool to update.\n   * @param toolUpdate A partial object conforming to InsertAiTool (snake_case) containing the fields to update.\n   * @returns A promise that resolves to the updated AiTool object.\n   * @throws Error if the tool is not found or if no fields are provided for update.\n   */ async updateAITool(id, toolUpdate) {\n        await this.ensureInitialized();\n        const dbUpdateData = toolUpdate;\n        if (\"tool_id\" in dbUpdateData) delete dbUpdateData.tool_id;\n        if (\"created_at\" in dbUpdateData) delete dbUpdateData.created_at;\n        const finalUpdateData = {\n            ...dbUpdateData,\n            updated_at: new Date()\n        };\n        if (Object.keys(dbUpdateData).length === 0) {\n            // Throw error if only timestamp would be updated (as no other fields were in toolUpdate)\n            throw new Error(\"No fields provided to update for AI Tool.\");\n        }\n        const result = await this.db.update(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.aiTools).set(finalUpdateData).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.aiTools.tool_id, id)).returning();\n        const updatedDbTool = result[0];\n        if (!updatedDbTool) {\n            throw new Error(`Failed to update AI tool with ID ${id}, record not found or update failed.`);\n        }\n        return updatedDbTool;\n    }\n    /**\n   * Deletes an AI tool by its ID.\n   * @param id The numeric ID of the AI tool to delete.\n   * @returns A promise that resolves when the deletion is attempted. Logs a warning if the tool was not found.\n   */ async deleteAITool(id) {\n        await this.ensureInitialized();\n        const result = await this.db.delete(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.aiTools).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.aiTools.tool_id, id)).returning({\n            deletedId: _shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.aiTools.tool_id\n        });\n        if (result.length === 0) {\n            console.warn(`Attempted to delete AI Tool with ID ${id}, but it was not found.`);\n        }\n    }\n    // CapabilityToolMapping methods\n    // These seem okay as they use the specific InsertCapabilityToolMapping type\n    async getCapabilityToolMappings(capabilityId) {\n        await this.ensureInitialized();\n        return await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.capabilityToolMapping).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.capabilityToolMapping.capabilityId, capabilityId));\n    }\n    async getToolCapabilityMappings(toolId) {\n        await this.ensureInitialized();\n        return await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.capabilityToolMapping).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.capabilityToolMapping.toolId, toolId));\n    }\n    async createCapabilityToolMapping(mapping) {\n        await this.ensureInitialized();\n        const result = await this.db.insert(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.capabilityToolMapping).values({\n            ...mapping,\n            notes: mapping.notes || null\n        }).returning();\n        return result[0];\n    }\n    async deleteCapabilityToolMapping(mappingId) {\n        await this.ensureInitialized();\n        await this.db.delete(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.capabilityToolMapping).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.capabilityToolMapping.mappingId, mappingId));\n    }\n    // Assessment Score methods\n    async upsertAssessmentScore(score) {\n        await this.ensureInitialized();\n        const result = await this.db.insert(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.assessmentScores).values({\n            ...score,\n            updatedAt: new Date()\n        }).onConflictDoUpdate({\n            target: _shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.assessmentScores.wizardStepId,\n            set: {\n                ...score,\n                updatedAt: new Date()\n            }\n        }).returning();\n        return result[0];\n    }\n    async getAssessmentScore(wizardStepId) {\n        await this.ensureInitialized();\n        const result = await this.db.select().from(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.assessmentScores).where((0,drizzle_orm__WEBPACK_IMPORTED_MODULE_5__.eq)(_shared_schema_ts__WEBPACK_IMPORTED_MODULE_2__.assessmentScores.wizardStepId, wizardStepId));\n        return result[0];\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./server/pg-storage.ts\n");

/***/ }),

/***/ "(rsc)/./server/storage.ts":
/*!***************************!*\
  !*** ./server/storage.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MemStorage: () => (/* binding */ MemStorage),\n/* harmony export */   storage: () => (/* binding */ storage)\n/* harmony export */ });\n/* harmony import */ var _pg_storage_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pg-storage.ts */ \"(rsc)/./server/pg-storage.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pg_storage_ts__WEBPACK_IMPORTED_MODULE_0__]);\n_pg_storage_ts__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nclass MemStorage {\n    constructor(){\n        this.users = new Map();\n        this.organizations = new Map();\n        this.departments = new Map();\n        this.jobRoles = new Map();\n        this.aiCapabilities = new Map();\n        this.assessments = new Map();\n        this.reports = new Map();\n        this.jobDescriptions = new Map();\n        this.jobScraperConfigs = new Map();\n        this.aiTools = new Map();\n        this.userIdCounter = 1;\n        this.orgIdCounter = 1;\n        this.deptIdCounter = 1;\n        this.roleIdCounter = 1;\n        this.capabilityIdCounter = 1;\n        this.assessmentIdCounter = 1;\n        this.reportIdCounter = 1;\n        this.jobDescriptionIdCounter = 1;\n        this.jobScraperConfigIdCounter = 1;\n        this.aiToolIdCounter = 1;\n        // Initialize with sample data\n        this.initializeSampleData();\n    }\n    // User methods\n    async getUser(id) {\n        return this.users.get(id);\n    }\n    async getUserByUsername(username) {\n        return Array.from(this.users.values()).find((user)=>user.username === username);\n    }\n    async createUser(insertUser) {\n        const id = this.userIdCounter++;\n        const user = {\n            ...insertUser,\n            id,\n            role: insertUser.role || \"consultant\" // Ensure role is always defined\n        };\n        this.users.set(id, user);\n        return user;\n    }\n    // Organization methods\n    async getOrganization(id) {\n        return this.organizations.get(id);\n    }\n    async listOrganizations() {\n        return Array.from(this.organizations.values());\n    }\n    async createOrganization(org) {\n        const id = this.orgIdCounter++;\n        const organization = {\n            ...org,\n            id,\n            description: org.description || null // Ensure description is never undefined\n        };\n        this.organizations.set(id, organization);\n        return organization;\n    }\n    // Department methods\n    async getDepartment(id) {\n        return this.departments.get(id);\n    }\n    async listDepartments() {\n        return Array.from(this.departments.values());\n    }\n    async createDepartment(dept) {\n        const id = this.deptIdCounter++;\n        const department = {\n            ...dept,\n            id,\n            description: dept.description || null // Ensure description is never undefined\n        };\n        this.departments.set(id, department);\n        return department;\n    }\n    // JobRole methods\n    async getJobRole(id) {\n        return this.jobRoles.get(id);\n    }\n    async listJobRoles() {\n        return Array.from(this.jobRoles.values());\n    }\n    async listJobRolesByDepartment(departmentId) {\n        return Array.from(this.jobRoles.values()).filter((role)=>role.departmentId === departmentId);\n    }\n    async createJobRole(role) {\n        const id = this.roleIdCounter++;\n        const jobRole = {\n            ...role,\n            id,\n            description: role.description || null,\n            keyResponsibilities: role.keyResponsibilities || null,\n            aiPotential: role.aiPotential || null\n        };\n        this.jobRoles.set(id, jobRole);\n        return jobRole;\n    }\n    // AICapability methods\n    async getAICapability(id) {\n        return this.aiCapabilities.get(id);\n    }\n    async listAICapabilities() {\n        return Array.from(this.aiCapabilities.values());\n    }\n    async createAICapability(capability) {\n        const id = this.capabilityIdCounter++;\n        const aiCapability = {\n            ...capability,\n            id,\n            description: capability.description || null,\n            implementationEffort: capability.implementationEffort || null,\n            businessValue: capability.businessValue || null,\n            easeScore: capability.easeScore || null,\n            valueScore: capability.valueScore || null\n        };\n        this.aiCapabilities.set(id, aiCapability);\n        return aiCapability;\n    }\n    // Assessment methods\n    async getAssessment(id) {\n        return this.assessments.get(id);\n    }\n    async listAssessments() {\n        return Array.from(this.assessments.values());\n    }\n    async listAssessmentsByUser(userId) {\n        return Array.from(this.assessments.values()).filter((assessment)=>assessment.userId === userId);\n    }\n    async createAssessment(assessment) {\n        const id = this.assessmentIdCounter++;\n        const createdAt = new Date();\n        const newAssessment = {\n            ...assessment,\n            id,\n            createdAt,\n            status: assessment.status || \"draft\",\n            stepData: assessment.stepData || null\n        };\n        this.assessments.set(id, newAssessment);\n        return newAssessment;\n    }\n    async updateAssessmentStep(id, stepData) {\n        const assessment = this.assessments.get(id);\n        if (!assessment) {\n            throw new Error(`Assessment with id ${id} not found`);\n        }\n        const updatedAssessment = {\n            ...assessment,\n            stepData: {\n                ...assessment.stepData || {},\n                ...stepData\n            }\n        };\n        this.assessments.set(id, updatedAssessment);\n        return updatedAssessment;\n    }\n    async updateAssessmentStatus(id, status) {\n        const assessment = this.assessments.get(id);\n        if (!assessment) {\n            throw new Error(`Assessment with id ${id} not found`);\n        }\n        const updatedAssessment = {\n            ...assessment,\n            status\n        };\n        this.assessments.set(id, updatedAssessment);\n        return updatedAssessment;\n    }\n    // Report methods\n    async getReport(id) {\n        return this.reports.get(id);\n    }\n    async getReportByAssessment(assessmentId) {\n        return Array.from(this.reports.values()).find((report)=>report.assessmentId === assessmentId);\n    }\n    async listReports() {\n        return Array.from(this.reports.values());\n    }\n    async createReport(report) {\n        const id = this.reportIdCounter++;\n        const generatedAt = new Date();\n        const newReport = {\n            ...report,\n            id,\n            generatedAt,\n            executiveSummary: report.executiveSummary || null,\n            prioritizationData: report.prioritizationData || null,\n            aiSuggestions: report.aiSuggestions || null,\n            performanceImpact: report.performanceImpact || null,\n            consultantCommentary: report.consultantCommentary || null\n        };\n        this.reports.set(id, newReport);\n        return newReport;\n    }\n    async updateReportCommentary(id, commentary) {\n        const report = this.reports.get(id);\n        if (!report) {\n            throw new Error(`Report with id ${id} not found`);\n        }\n        const updatedReport = {\n            ...report,\n            consultantCommentary: commentary\n        };\n        this.reports.set(id, updatedReport);\n        return updatedReport;\n    }\n    // Job Description methods\n    async getJobDescription(id) {\n        return this.jobDescriptions.get(id);\n    }\n    async listJobDescriptions(limit = 100, offset = 0) {\n        const allJobDescriptions = Array.from(this.jobDescriptions.values());\n        return allJobDescriptions.slice(offset, offset + limit);\n    }\n    async listJobDescriptionsByStatus(status, limit = 100, offset = 0) {\n        const filteredJobDescriptions = Array.from(this.jobDescriptions.values()).filter((jd)=>jd.status === status);\n        return filteredJobDescriptions.slice(offset, offset + limit);\n    }\n    async createJobDescription(jobDescription) {\n        const id = this.jobDescriptionIdCounter++;\n        const now = new Date();\n        const newJobDescription = {\n            ...jobDescription,\n            id,\n            status: jobDescription.status || \"raw\",\n            company: jobDescription.company || null,\n            location: jobDescription.location || null,\n            processedContent: null,\n            keywords: jobDescription.keywords || null,\n            dateScraped: now,\n            dateProcessed: null,\n            error: null\n        };\n        this.jobDescriptions.set(id, newJobDescription);\n        return newJobDescription;\n    }\n    async updateJobDescriptionProcessedContent(id, processedContent) {\n        const jobDescription = this.jobDescriptions.get(id);\n        if (!jobDescription) {\n            throw new Error(`JobDescription with id ${id} not found`);\n        }\n        const updatedJobDescription = {\n            ...jobDescription,\n            processedContent\n        };\n        this.jobDescriptions.set(id, updatedJobDescription);\n        return updatedJobDescription;\n    }\n    async updateJobDescriptionStatus(id, status, error) {\n        const jobDescription = this.jobDescriptions.get(id);\n        if (!jobDescription) {\n            throw new Error(`JobDescription with id ${id} not found`);\n        }\n        const updatedJobDescription = {\n            ...jobDescription,\n            status,\n            error: error || null\n        };\n        this.jobDescriptions.set(id, updatedJobDescription);\n        return updatedJobDescription;\n    }\n    // Job Scraper Config methods\n    async getJobScraperConfig(id) {\n        return this.jobScraperConfigs.get(id);\n    }\n    async listJobScraperConfigs() {\n        return Array.from(this.jobScraperConfigs.values());\n    }\n    async listActiveJobScraperConfigs() {\n        return Array.from(this.jobScraperConfigs.values()).filter((config)=>config.isActive);\n    }\n    async createJobScraperConfig(config) {\n        const id = this.jobScraperConfigIdCounter++;\n        const now = new Date();\n        const newConfig = {\n            ...config,\n            id,\n            createdAt: now,\n            location: config.location || null,\n            keywords: config.keywords || null,\n            isActive: config.isActive ?? true,\n            cronSchedule: config.cronSchedule || \"0 0 * * *\",\n            lastRun: null\n        };\n        this.jobScraperConfigs.set(id, newConfig);\n        return newConfig;\n    }\n    async updateJobScraperConfigLastRun(id) {\n        const config = this.jobScraperConfigs.get(id);\n        if (!config) {\n            throw new Error(`JobScraperConfig with id ${id} not found`);\n        }\n        const updatedConfig = {\n            ...config,\n            lastRun: new Date()\n        };\n        this.jobScraperConfigs.set(id, updatedConfig);\n        return updatedConfig;\n    }\n    async updateJobScraperConfigStatus(id, isActive) {\n        const config = this.jobScraperConfigs.get(id);\n        if (!config) {\n            throw new Error(`JobScraperConfig with id ${id} not found`);\n        }\n        const updatedConfig = {\n            ...config,\n            isActive\n        };\n        this.jobScraperConfigs.set(id, updatedConfig);\n        return updatedConfig;\n    }\n    // AI Tool methods - USE snake_case type\n    async getAITool(id) {\n        return this.aiTools.get(id);\n    }\n    async listAITools(search, category, licenseType) {\n        let tools = Array.from(this.aiTools.values());\n        if (search) {\n            const searchLower = search.toLowerCase();\n            tools = tools.filter((tool)=>tool.tool_name.toLowerCase().includes(searchLower) || tool.description.toLowerCase().includes(searchLower) || tool.primary_category.toLowerCase().includes(searchLower) || tool.tags?.some((tag)=>tag.toLowerCase().includes(searchLower)));\n        }\n        if (category) {\n            tools = tools.filter((tool)=>tool.primary_category === category);\n        }\n        if (licenseType) {\n            tools = tools.filter((tool)=>tool.license_type === licenseType);\n        }\n        return tools;\n    }\n    async createAITool(tool) {\n        const id = this.aiToolIdCounter++;\n        const now = new Date();\n        const newTool = {\n            id,\n            ...tool,\n            created_at: now,\n            updated_at: now\n        };\n        this.aiTools.set(id, newTool);\n        return newTool;\n    }\n    async updateAITool(id, toolUpdate) {\n        const existingTool = await this.getAITool(id);\n        if (!existingTool) {\n            throw new Error(`AI Tool with id ${id} not found`);\n        }\n        const updatedTool = {\n            ...existingTool,\n            ...toolUpdate,\n            updated_at: new Date()\n        };\n        this.aiTools.set(id, updatedTool);\n        return updatedTool;\n    }\n    async deleteAITool(id) {\n        this.aiTools.delete(id);\n    }\n    initializeSampleData() {\n        // Create sample user\n        const user = {\n            id: this.userIdCounter++,\n            username: \"consultant\",\n            password: \"password123\",\n            fullName: \"Consultant User\",\n            email: \"consultant@example.com\",\n            role: \"consultant\"\n        };\n        this.users.set(user.id, user);\n        // Create sample departments\n        const departments = [\n            {\n                id: this.deptIdCounter++,\n                name: \"Sales & Marketing\",\n                description: \"Handles all sales and marketing activities\"\n            },\n            {\n                id: this.deptIdCounter++,\n                name: \"Customer Support\",\n                description: \"Provides support to customers\"\n            },\n            {\n                id: this.deptIdCounter++,\n                name: \"Finance\",\n                description: \"Manages financial operations\"\n            },\n            {\n                id: this.deptIdCounter++,\n                name: \"Human Resources\",\n                description: \"Handles employee management and recruitment\"\n            },\n            {\n                id: this.deptIdCounter++,\n                name: \"Engineering\",\n                description: \"Develops and maintains products\"\n            },\n            {\n                id: this.deptIdCounter++,\n                name: \"Operations\",\n                description: \"Oversees day-to-day business operations\"\n            }\n        ];\n        departments.forEach((dept)=>this.departments.set(dept.id, dept));\n        // Create sample job roles\n        const jobRoles = [\n            {\n                id: this.roleIdCounter++,\n                title: \"Sales Operations Specialist\",\n                departmentId: 1,\n                description: \"Manages RFP responses, sales data analysis, and CRM maintenance\",\n                keyResponsibilities: [\n                    \"Manage RFP responses\",\n                    \"Maintain sales data\",\n                    \"Perform CRM analysis\",\n                    \"Create sales reports\",\n                    \"Support proposal creation\"\n                ],\n                aiPotential: \"High\"\n            },\n            {\n                id: this.roleIdCounter++,\n                title: \"Content Marketing Manager\",\n                departmentId: 1,\n                description: \"Creates and distributes content for marketing campaigns\",\n                keyResponsibilities: [\n                    \"Create marketing content\",\n                    \"Manage editorial calendar\",\n                    \"Coordinate content distribution\",\n                    \"Analyze content performance\",\n                    \"Develop content strategy\"\n                ],\n                aiPotential: \"Medium\"\n            },\n            {\n                id: this.roleIdCounter++,\n                title: \"Digital Marketing Specialist\",\n                departmentId: 1,\n                description: \"Manages online advertising and campaign analysis\",\n                keyResponsibilities: [\n                    \"Manage online ad campaigns\",\n                    \"Analyze marketing data\",\n                    \"Optimize conversion rates\",\n                    \"Report on marketing KPIs\",\n                    \"Conduct A/B testing\"\n                ],\n                aiPotential: \"Medium\"\n            },\n            {\n                id: this.roleIdCounter++,\n                title: \"Customer Support Agent\",\n                departmentId: 2,\n                description: \"Handles tier 1 customer inquiries via chat, email, and phone\",\n                keyResponsibilities: [\n                    \"Handle customer inquiries\",\n                    \"Troubleshoot basic issues\",\n                    \"Escalate complex problems\",\n                    \"Maintain customer records\",\n                    \"Follow up on resolved issues\"\n                ],\n                aiPotential: \"High\"\n            },\n            {\n                id: this.roleIdCounter++,\n                title: \"Technical Support Specialist\",\n                departmentId: 2,\n                description: \"Resolves complex technical issues and product-specific problems\",\n                keyResponsibilities: [\n                    \"Diagnose technical problems\",\n                    \"Provide advanced troubleshooting\",\n                    \"Document solutions\",\n                    \"Train junior support staff\",\n                    \"Contribute to knowledge base\"\n                ],\n                aiPotential: \"Medium\"\n            }\n        ];\n        jobRoles.forEach((role)=>this.jobRoles.set(role.id, role));\n        // Sample AI Capabilities\n        const sampleCapabilities = [\n            {\n                name: \"Automated Document Processing\",\n                category: \"Document Management\",\n                description: \"AI-powered document processing and analysis\",\n                implementationEffort: \"Medium\",\n                businessValue: \"High\",\n                easeScore: \"Medium\",\n                valueScore: \"High\"\n            },\n            {\n                name: \"Predictive Analytics\",\n                category: \"Data Analysis\",\n                description: \"Advanced predictive modeling and forecasting\",\n                implementationEffort: \"High\",\n                businessValue: \"Very High\",\n                easeScore: \"Low\",\n                valueScore: \"Very High\"\n            },\n            {\n                name: \"Natural Language Processing\",\n                category: \"Text Analysis\",\n                description: \"Understanding and processing human language\",\n                implementationEffort: \"Medium\",\n                businessValue: \"High\",\n                easeScore: \"Medium\",\n                valueScore: \"High\"\n            },\n            {\n                name: \"Image Recognition\",\n                category: \"Computer Vision\",\n                description: \"AI-powered image analysis and recognition\",\n                implementationEffort: \"High\",\n                businessValue: \"Medium\",\n                easeScore: \"Low\",\n                valueScore: \"Medium\"\n            },\n            {\n                name: \"Process Automation\",\n                category: \"Workflow\",\n                description: \"Automating repetitive business processes\",\n                implementationEffort: \"Low\",\n                businessValue: \"High\",\n                easeScore: \"High\",\n                valueScore: \"High\"\n            }\n        ];\n        sampleCapabilities.forEach((capability)=>{\n            this.createAICapability(capability);\n        });\n        // Add sample job scraper configs\n        this.createJobScraperConfig({\n            name: \"LinkedIn Tech Jobs\",\n            targetWebsite: \"linkedin\",\n            keywords: [\n                \"software engineer\",\n                \"web developer\",\n                \"frontend\",\n                \"backend\"\n            ],\n            location: \"San Francisco\",\n            isActive: true,\n            cronSchedule: \"0 0 * * *\"\n        });\n        this.createJobScraperConfig({\n            name: \"Indeed Data Science\",\n            targetWebsite: \"indeed\",\n            keywords: [\n                \"data scientist\",\n                \"machine learning\",\n                \"AI\",\n                \"data analyst\"\n            ],\n            location: \"Remote\",\n            isActive: true,\n            cronSchedule: \"0 12 * * *\"\n        });\n    }\n}\n// Create storage instance based on environment\nlet storageInstance;\ntry {\n    // Check if DATABASE_URL is configured\n    if (process.env.DATABASE_URL) {\n        console.log(\"Using PostgreSQL storage implementation\");\n        storageInstance = new _pg_storage_ts__WEBPACK_IMPORTED_MODULE_0__.PgStorage();\n    } else {\n        console.log(\"DATABASE_URL not set, using in-memory storage implementation\");\n        storageInstance = new MemStorage();\n    }\n} catch (error) {\n    console.error(\"Error initializing PostgreSQL storage, falling back to in-memory storage:\", error);\n    storageInstance = new MemStorage();\n}\n// Export the selected storage implementation\nconst storage = storageInstance;\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./server/storage.ts\n");

/***/ }),

/***/ "(rsc)/./shared/schema.ts":
/*!**************************!*\
  !*** ./shared/schema.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   aiCapabilities: () => (/* binding */ aiCapabilities),\n/* harmony export */   aiTools: () => (/* binding */ aiTools),\n/* harmony export */   assessmentResponses: () => (/* binding */ assessmentResponses),\n/* harmony export */   assessmentResults: () => (/* binding */ assessmentResults),\n/* harmony export */   assessmentScores: () => (/* binding */ assessmentScores),\n/* harmony export */   assessments: () => (/* binding */ assessments),\n/* harmony export */   capabilityToolMapping: () => (/* binding */ capabilityToolMapping),\n/* harmony export */   departments: () => (/* binding */ departments),\n/* harmony export */   effortLevels: () => (/* binding */ effortLevels),\n/* harmony export */   insertAICapabilitySchema: () => (/* binding */ insertAICapabilitySchema),\n/* harmony export */   insertAiToolSchema: () => (/* binding */ insertAiToolSchema),\n/* harmony export */   insertAssessmentSchema: () => (/* binding */ insertAssessmentSchema),\n/* harmony export */   insertDepartmentSchema: () => (/* binding */ insertDepartmentSchema),\n/* harmony export */   insertJobDescriptionSchema: () => (/* binding */ insertJobDescriptionSchema),\n/* harmony export */   insertJobRoleSchema: () => (/* binding */ insertJobRoleSchema),\n/* harmony export */   insertJobScraperConfigSchema: () => (/* binding */ insertJobScraperConfigSchema),\n/* harmony export */   insertOrganizationSchema: () => (/* binding */ insertOrganizationSchema),\n/* harmony export */   insertReportSchema: () => (/* binding */ insertReportSchema),\n/* harmony export */   insertUserSchema: () => (/* binding */ insertUserSchema),\n/* harmony export */   jobDescriptions: () => (/* binding */ jobDescriptions),\n/* harmony export */   jobRoles: () => (/* binding */ jobRoles),\n/* harmony export */   jobScraperConfigs: () => (/* binding */ jobScraperConfigs),\n/* harmony export */   organizations: () => (/* binding */ organizations),\n/* harmony export */   priorityLevels: () => (/* binding */ priorityLevels),\n/* harmony export */   reports: () => (/* binding */ reports),\n/* harmony export */   scoringCriteria: () => (/* binding */ scoringCriteria),\n/* harmony export */   users: () => (/* binding */ users),\n/* harmony export */   valueLevels: () => (/* binding */ valueLevels),\n/* harmony export */   wizardStepDataSchema: () => (/* binding */ wizardStepDataSchema)\n/* harmony export */ });\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"(rsc)/./node_modules/drizzle-orm/pg-core/table.js\");\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"(rsc)/./node_modules/drizzle-orm/pg-core/columns/serial.js\");\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"(rsc)/./node_modules/drizzle-orm/pg-core/columns/text.js\");\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"(rsc)/./node_modules/drizzle-orm/pg-core/columns/integer.js\");\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"(rsc)/./node_modules/drizzle-orm/pg-core/columns/numeric.js\");\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"(rsc)/./node_modules/drizzle-orm/pg-core/columns/timestamp.js\");\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"(rsc)/./node_modules/drizzle-orm/pg-core/columns/jsonb.js\");\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"(rsc)/./node_modules/drizzle-orm/pg-core/columns/boolean.js\");\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"(rsc)/./node_modules/drizzle-orm/pg-core/indexes.js\");\n/* harmony import */ var drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! drizzle-orm/pg-core */ \"(rsc)/./node_modules/drizzle-orm/pg-core/primary-keys.js\");\n/* harmony import */ var drizzle_zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! drizzle-zod */ \"(rsc)/./node_modules/drizzle-zod/index.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n\n\n\n// User model for authentication (minimal for v1)\nconst users = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.pgTable)(\"users\", {\n    id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.serial)(\"id\").primaryKey(),\n    username: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"username\").notNull().unique(),\n    password: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"password\").notNull(),\n    fullName: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"full_name\").notNull(),\n    email: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"email\").notNull(),\n    role: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"role\").default(\"consultant\").notNull()\n});\nconst insertUserSchema = (0,drizzle_zod__WEBPACK_IMPORTED_MODULE_0__.createInsertSchema)(users).pick({\n    username: true,\n    password: true,\n    fullName: true,\n    email: true,\n    role: true\n});\n// Company/Organization model\nconst organizations = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.pgTable)(\"organizations\", {\n    id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.serial)(\"id\").primaryKey(),\n    name: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"name\").notNull(),\n    industry: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"industry\").notNull(),\n    size: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"size\").notNull(),\n    description: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"description\")\n});\nconst insertOrganizationSchema = (0,drizzle_zod__WEBPACK_IMPORTED_MODULE_0__.createInsertSchema)(organizations).pick({\n    name: true,\n    industry: true,\n    size: true,\n    description: true\n});\n// Department model\nconst departments = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.pgTable)(\"departments\", {\n    id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.serial)(\"id\").primaryKey(),\n    name: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"name\").notNull(),\n    description: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"description\")\n});\nconst insertDepartmentSchema = (0,drizzle_zod__WEBPACK_IMPORTED_MODULE_0__.createInsertSchema)(departments).pick({\n    name: true,\n    description: true\n});\n// Job Role model\nconst jobRoles = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.pgTable)(\"job_roles\", {\n    id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.serial)(\"id\").primaryKey(),\n    title: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"title\").notNull(),\n    departmentId: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_4__.integer)(\"department_id\").notNull(),\n    description: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"description\"),\n    keyResponsibilities: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"key_responsibilities\").array(),\n    aiPotential: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"ai_potential\")\n});\nconst insertJobRoleSchema = (0,drizzle_zod__WEBPACK_IMPORTED_MODULE_0__.createInsertSchema)(jobRoles).pick({\n    title: true,\n    departmentId: true,\n    description: true,\n    keyResponsibilities: true,\n    aiPotential: true\n}).extend({\n    keyResponsibilities: zod__WEBPACK_IMPORTED_MODULE_5__.z.union([\n        zod__WEBPACK_IMPORTED_MODULE_5__.z.string().transform((str)=>str.split(\"\\n\").map((s)=>s.trim()).filter((s)=>s.length > 0)),\n        zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.string())\n    ]).default([])\n});\n// AI Capability model - UPDATED\nconst aiCapabilities = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.pgTable)(\"ai_capabilities\", {\n    id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_4__.integer)(\"id\").primaryKey(),\n    name: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"name\").notNull(),\n    category: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"category\").notNull(),\n    description: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"description\"),\n    implementationEffort: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"implementation_effort\"),\n    businessValue: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"business_value\"),\n    easeScore: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.numeric)(\"ease_score\"),\n    valueScore: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.numeric)(\"value_score\"),\n    // Fields to migrate from ai_tools (make them nullable initially)\n    primary_category: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"primary_category\"),\n    license_type: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"license_type\"),\n    website_url: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"website_url\"),\n    tags: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"tags\").array(),\n    // Standard Timestamps\n    createdAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.timestamp)(\"created_at\").defaultNow().notNull(),\n    updatedAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.timestamp)(\"updated_at\").defaultNow().notNull()\n});\nconst insertAICapabilitySchema = (0,drizzle_zod__WEBPACK_IMPORTED_MODULE_0__.createInsertSchema)(aiCapabilities).pick({\n    id: true,\n    name: true,\n    category: true,\n    description: true,\n    implementationEffort: true,\n    businessValue: true,\n    easeScore: true,\n    valueScore: true,\n    // Add migrated fields\n    primary_category: true,\n    license_type: true,\n    website_url: true,\n    tags: true\n}).extend({\n    businessValue: zod__WEBPACK_IMPORTED_MODULE_5__.z.enum([\n        \"Low\",\n        \"Medium\",\n        \"High\",\n        \"Very High\"\n    ]).default(\"Medium\"),\n    implementationEffort: zod__WEBPACK_IMPORTED_MODULE_5__.z.enum([\n        \"Low\",\n        \"Medium\",\n        \"High\"\n    ]).default(\"Medium\"),\n    // Ensure tags are treated as an array, potentially empty\n    tags: zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.string()).optional().default([]),\n    // Make migrated fields optional in Zod if they can be null in the DB\n    primary_category: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n    license_type: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n    website_url: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional()\n});\n// Assessment model\nconst assessments = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.pgTable)(\"assessments\", {\n    id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.serial)(\"id\").primaryKey(),\n    title: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"title\").notNull(),\n    organizationId: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_4__.integer)(\"organization_id\").notNull(),\n    userId: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_4__.integer)(\"user_id\").notNull(),\n    status: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"status\").default(\"draft\").notNull(),\n    createdAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.timestamp)(\"created_at\").defaultNow().notNull(),\n    stepData: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_8__.jsonb)(\"step_data\")\n});\nconst insertAssessmentSchema = (0,drizzle_zod__WEBPACK_IMPORTED_MODULE_0__.createInsertSchema)(assessments).pick({\n    title: true,\n    organizationId: true,\n    userId: true,\n    status: true,\n    stepData: true\n});\n// Report model\nconst reports = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.pgTable)(\"reports\", {\n    id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.serial)(\"id\").primaryKey(),\n    assessmentId: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_4__.integer)(\"assessment_id\").notNull(),\n    generatedAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.timestamp)(\"generated_at\").defaultNow().notNull(),\n    executiveSummary: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"executive_summary\"),\n    prioritizationData: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_8__.jsonb)(\"prioritization_data\"),\n    aiSuggestions: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_8__.jsonb)(\"ai_suggestions\"),\n    performanceImpact: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_8__.jsonb)(\"performance_impact\"),\n    consultantCommentary: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"consultant_commentary\")\n});\nconst insertReportSchema = (0,drizzle_zod__WEBPACK_IMPORTED_MODULE_0__.createInsertSchema)(reports).pick({\n    assessmentId: true,\n    executiveSummary: true,\n    prioritizationData: true,\n    aiSuggestions: true,\n    performanceImpact: true,\n    consultantCommentary: true\n});\n// Scoring types\nconst scoringCriteria = {\n    valuePotential: {\n        timeSavings: \"time_savings\",\n        qualityImpact: \"quality_impact\",\n        strategicAlignment: \"strategic_alignment\"\n    },\n    easeOfImplementation: {\n        dataReadiness: \"data_readiness\",\n        technicalFeasibility: \"technical_feasibility\",\n        adoptionRisk: \"adoption_risk\"\n    }\n};\n// Update the Wizard Step Data schema\nconst wizardStepDataSchema = zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n    basics: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        companyName: zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),\n        industry: zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),\n        size: zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),\n        goals: zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),\n        stakeholders: zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.string())\n    }).optional(),\n    roles: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        selectedDepartments: zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.string()),\n        selectedRoles: zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n            id: zod__WEBPACK_IMPORTED_MODULE_5__.z.number().optional(),\n            title: zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),\n            department: zod__WEBPACK_IMPORTED_MODULE_5__.z.string(),\n            description: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n            responsibilities: zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.string()).optional()\n        })),\n        prioritizedRoles: zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.number()).optional(),\n        customDepartment: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional()\n    }).optional(),\n    painPoints: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        roleSpecificPainPoints: zod__WEBPACK_IMPORTED_MODULE_5__.z.record(zod__WEBPACK_IMPORTED_MODULE_5__.z.string(), zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n            description: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n            severity: zod__WEBPACK_IMPORTED_MODULE_5__.z.number().optional(),\n            frequency: zod__WEBPACK_IMPORTED_MODULE_5__.z.number().optional(),\n            impact: zod__WEBPACK_IMPORTED_MODULE_5__.z.number().optional()\n        })),\n        generalPainPoints: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional()\n    }).optional(),\n    workVolume: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        roleWorkVolume: zod__WEBPACK_IMPORTED_MODULE_5__.z.record(zod__WEBPACK_IMPORTED_MODULE_5__.z.string(), zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n            volume: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n            timeSpent: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n            complexity: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n            errorRisk: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n            repetitiveness: zod__WEBPACK_IMPORTED_MODULE_5__.z.number().optional(),\n            isDataDriven: zod__WEBPACK_IMPORTED_MODULE_5__.z.boolean().optional(),\n            dataDescription: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n            hasPredictiveTasks: zod__WEBPACK_IMPORTED_MODULE_5__.z.boolean().optional(),\n            predictiveTasksDescription: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n            needsContentGeneration: zod__WEBPACK_IMPORTED_MODULE_5__.z.boolean().optional(),\n            contentGenerationDescription: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n            decisionComplexity: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional()\n        }))\n    }).optional(),\n    techStack: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        currentSystems: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n        dataAvailability: zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.string()).optional(),\n        existingAutomation: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n        dataQuality: zod__WEBPACK_IMPORTED_MODULE_5__.z.number().optional(),\n        dataQualityIssues: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n        approvals: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional()\n    }).optional(),\n    adoption: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        roleAdoption: zod__WEBPACK_IMPORTED_MODULE_5__.z.record(zod__WEBPACK_IMPORTED_MODULE_5__.z.string(), zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n            openness: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n            skillsReadiness: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n            benefits: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n            successCriteria: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n            risks: zod__WEBPACK_IMPORTED_MODULE_5__.z.string().optional(),\n            suitability: zod__WEBPACK_IMPORTED_MODULE_5__.z.number().optional()\n        }))\n    }).optional(),\n    scores: zod__WEBPACK_IMPORTED_MODULE_5__.z.object({\n        assessmentScores: zod__WEBPACK_IMPORTED_MODULE_5__.z.custom()\n    }).optional()\n}).strict();\n// Priority matrix types\nconst priorityLevels = [\n    \"high\",\n    \"medium\",\n    \"low\",\n    \"not_recommended\"\n];\nconst effortLevels = [\n    \"low\",\n    \"medium\",\n    \"high\"\n];\nconst valueLevels = [\n    \"high\",\n    \"medium\",\n    \"low\"\n];\n// Job Description models\nconst jobDescriptions = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.pgTable)(\"job_descriptions\", {\n    id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.serial)(\"id\").primaryKey(),\n    title: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"title\").notNull(),\n    company: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"company\"),\n    location: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"location\"),\n    jobBoard: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"job_board\").notNull(),\n    sourceUrl: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"source_url\").notNull(),\n    rawContent: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"raw_content\").notNull(),\n    processedContent: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_8__.jsonb)(\"processed_content\"),\n    keywords: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"keywords\").array(),\n    dateScraped: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.timestamp)(\"date_scraped\").defaultNow().notNull(),\n    dateProcessed: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.timestamp)(\"date_processed\"),\n    status: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"status\").default(\"raw\").notNull(),\n    error: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"error\")\n});\nconst insertJobDescriptionSchema = (0,drizzle_zod__WEBPACK_IMPORTED_MODULE_0__.createInsertSchema)(jobDescriptions).pick({\n    title: true,\n    company: true,\n    location: true,\n    jobBoard: true,\n    sourceUrl: true,\n    rawContent: true,\n    keywords: true,\n    status: true\n});\nconst jobScraperConfigs = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.pgTable)(\"job_scraper_configs\", {\n    id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.serial)(\"id\").primaryKey(),\n    name: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"name\").notNull(),\n    targetWebsite: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"target_website\").notNull(),\n    keywords: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"keywords\").array(),\n    location: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"location\"),\n    isActive: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_9__.boolean)(\"is_active\").default(true).notNull(),\n    cronSchedule: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"cron_schedule\").default(\"0 0 * * *\").notNull(),\n    lastRun: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.timestamp)(\"last_run\"),\n    createdAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.timestamp)(\"created_at\").defaultNow().notNull()\n});\nconst insertJobScraperConfigSchema = (0,drizzle_zod__WEBPACK_IMPORTED_MODULE_0__.createInsertSchema)(jobScraperConfigs).pick({\n    name: true,\n    targetWebsite: true,\n    keywords: true,\n    location: true,\n    isActive: true,\n    cronSchedule: true\n});\n// New Table: Assessment Responses\nconst assessmentResponses = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.pgTable)(\"assessment_responses\", {\n    responseId: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.serial)(\"response_id\").primaryKey(),\n    assessmentId: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_4__.integer)(\"assessment_id\").notNull().references(()=>assessments.id, {\n        onDelete: \"cascade\"\n    }),\n    userId: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_4__.integer)(\"user_id\").notNull().references(()=>users.id, {\n        onDelete: \"cascade\"\n    }),\n    questionIdentifier: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"question_identifier\").notNull(),\n    responseText: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"response_text\"),\n    responseNumeric: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.numeric)(\"response_numeric\"),\n    responseBoolean: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_9__.boolean)(\"response_boolean\"),\n    responseJson: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_8__.jsonb)(\"response_json\"),\n    createdAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.timestamp)(\"created_at\").defaultNow().notNull()\n});\n// New Table: AI Tools\nconst aiTools = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.pgTable)(\"ai_tools\", {\n    tool_id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_4__.integer)(\"tool_id\").primaryKey(),\n    tool_name: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"tool_name\").notNull(),\n    primary_category: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"primary_category\"),\n    license_type: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"license_type\"),\n    description: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"description\"),\n    website_url: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"website_url\"),\n    tags: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"tags\").array(),\n    created_at: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.timestamp)(\"created_at\").defaultNow().notNull(),\n    updated_at: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.timestamp)(\"updated_at\").defaultNow().notNull()\n}, (table)=>({\n        toolNameIdx: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_10__.uniqueIndex)(\"idx_ai_tools_tool_name\").on(table.tool_name)\n    }));\nconst insertAiToolSchema = (0,drizzle_zod__WEBPACK_IMPORTED_MODULE_0__.createInsertSchema)(aiTools).omit({\n    // tool_id must be provided if not serial\n    created_at: true,\n    updated_at: true\n}).extend({\n    tags: zod__WEBPACK_IMPORTED_MODULE_5__.z.array(zod__WEBPACK_IMPORTED_MODULE_5__.z.string()).optional().default([])\n});\n// New Table: Capability Tool Mapping (Many-to-Many)\nconst capabilityToolMapping = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.pgTable)(\"capability_tool_mapping\", {\n    capability_id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_4__.integer)(\"capability_id\").notNull().references(()=>aiCapabilities.id, {\n        onDelete: \"cascade\"\n    }),\n    tool_id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_4__.integer)(\"tool_id\").notNull().references(()=>aiTools.tool_id, {\n        onDelete: \"cascade\"\n    })\n}, (table)=>({\n        // pk: pg.primaryKey({ columns: [table.capability_id, table.tool_id] }), // Use primaryKey import\n        pk: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_11__.primaryKey)({\n            columns: [\n                table.capability_id,\n                table.tool_id\n            ]\n        })\n    }));\n// New Table: Assessment Results\nconst assessmentResults = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.pgTable)(\"assessment_results\", {\n    resultId: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.serial)(\"result_id\").primaryKey(),\n    assessmentId: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_4__.integer)(\"assessment_id\").notNull().references(()=>assessments.id, {\n        onDelete: \"cascade\"\n    }),\n    identifiedThemes: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_8__.jsonb)(\"identified_themes\"),\n    rankedPriorities: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_8__.jsonb)(\"ranked_priorities\"),\n    recommendedCapabilities: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_8__.jsonb)(\"recommended_capabilities\"),\n    capabilityRationale: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_8__.jsonb)(\"capability_rationale\"),\n    existingToolAnalysis: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"existing_tool_analysis\"),\n    recommendedTools: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_8__.jsonb)(\"recommended_tools\"),\n    rolloutCommentary: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"rollout_commentary\"),\n    heatmapData: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_8__.jsonb)(\"heatmap_data\"),\n    processingStatus: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"processing_status\").default(\"Pending\").notNull(),\n    errorMessage: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"error_message\"),\n    createdAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.timestamp)(\"created_at\").defaultNow().notNull(),\n    completedAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.timestamp)(\"completed_at\")\n}, (table)=>{\n    return {\n        // Ensure only one result per assessment\n        assessmentIdUnique: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_10__.uniqueIndex)(\"assessment_id_unique_idx\").on(table.assessmentId)\n    };\n});\n// Add new table for assessment scores\nconst assessmentScores = (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_1__.pgTable)(\"assessment_scores\", {\n    id: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_2__.serial)(\"id\").primaryKey(),\n    wizardStepId: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_3__.text)(\"wizard_step_id\").notNull().unique(),\n    timeSavings: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.numeric)(\"time_savings\").notNull(),\n    qualityImpact: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.numeric)(\"quality_impact\").notNull(),\n    strategicAlignment: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.numeric)(\"strategic_alignment\").notNull(),\n    dataReadiness: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.numeric)(\"data_readiness\").notNull(),\n    technicalFeasibility: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.numeric)(\"technical_feasibility\").notNull(),\n    adoptionRisk: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.numeric)(\"adoption_risk\").notNull(),\n    valuePotentialTotal: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.numeric)(\"value_potential_total\").notNull(),\n    easeOfImplementationTotal: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.numeric)(\"ease_of_implementation_total\").notNull(),\n    totalScore: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_6__.numeric)(\"total_score\").notNull(),\n    createdAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.timestamp)(\"created_at\").defaultNow().notNull(),\n    updatedAt: (0,drizzle_orm_pg_core__WEBPACK_IMPORTED_MODULE_7__.timestamp)(\"updated_at\").defaultNow().notNull()\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./shared/schema.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/zod","vendor-chunks/drizzle-orm","vendor-chunks/@neondatabase","vendor-chunks/drizzle-zod","vendor-chunks/dotenv"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdepartments%2Froute&page=%2Fapi%2Fdepartments%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdepartments%2Froute.ts&appDir=%2FUsers%2Fsamsena%2FDocuments%2FRepos%2Fairoadmap%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsamsena%2FDocuments%2FRepos%2Fairoadmap&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();